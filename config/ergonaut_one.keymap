#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt { quick-tap-ms = <200>; };

&mt {
    quick-tap-ms = <200>;
    flavor = "tap-preferred";
    require-prior-idle-ms = <200>;
};

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri-layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    behaviors {
        shift_caps: shift_caps {
            compatible = "zmk,behavior-tap-dance";
            label = "SHIFT_CAPS";
            #binding-cells = <0>;
            bindings = <&sk LEFT_SHIFT>, <&caps_word>;
        };

        layer1: layer1 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER1";
            #binding-cells = <0>;
            bindings = <&mo 1>, <&tog 1>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp GRAVE  &kp Q             &kp W               &kp E           &kp R           &kp T        &kp Y  &kp U            &kp I            &kp O                &kp P                     &kp LEFT_BRACKET
&kp TAB    &mt LEFT_SHIFT A  &mt LEFT_CONTROL S  &mt LEFT_ALT D  &mt LEFT_GUI F  &kp G        &kp H  &mt RIGHT_GUI J  &mt RIGHT_ALT K  &mt RIGHT_CONTROL L  &mt LEFT_SHIFT SEMICOLON  &kp SQT
&kp MINUS  &kp Z             &kp X               &kp C           &kp V           &kp B        &kp N  &kp M            &kp COMMA        &kp DOT              &kp FSLH                  &mt RIGHT_SHIFT BSLH
                                                 &lt 2 ESCAPE    &layer1         &shift_caps  &sl 2  &lt 1 ENTER      &kp SPACE
            >;
        };

        lower_layer {
            bindings = <
&trans  &kp GRAVE            &none            &kp LEFT_BRACKET             &kp RIGHT_BRACKET             &none      &kp LG(X)  &kp BACKSPACE   &kp UP_ARROW    &kp DELETE       &none      &none
&trans  &mt LEFT_SHIFT EXCL  &mt LCTRL EQUAL  &mt LS(LEFT_ALT) LEFT_BRACE  &mt LS(LEFT_GUI) RIGHT_BRACE  &kp PRCNT  &kp LG(Z)  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp EQUAL  &kp BACKSLASH
&trans  &none                &none            &kp LEFT_PARENTHESIS         &kp RIGHT_PARENTHESIS         &none      &none      &kp LG(C)       &kp LG(V)       &none            &none      &trans
                                              &trans                       &trans                        &trans     &trans     &trans          &trans
            >;
        };

        raise_layer {
            bindings = <
&none   &none           &none      &none          &none             &none   &kp NUMBER_0   &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &none      &none
&none   &kp LEFT_SHIFT  &kp EQUAL  &kp PLUS       &kp MINUS         &none   &kp DOT        &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp COLON  &none
&trans  &none           &none      &kp LESS_THAN  &kp GREATER_THAN  &none   &kp TILDE      &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp SLASH  &none
                                   &trans         &trans            &trans  &kp BACKSPACE  &trans        &trans
            >;
        };

        adjust_layer {
            bindings = <
&bootloader  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none  &none   &none   &none  &none  &bootloader
&none        &none         &none         &none         &none         &none         &none  &none   &none   &none  &none  &none
&sys_reset   &none         &none         &none         &none         &none         &none  &none   &none   &none  &none  &sys_reset
                                         &trans        &none         &trans        &none  &trans  &trans
            >;
        };
    };
};
